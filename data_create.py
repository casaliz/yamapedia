from PIL import Image
import os, glob
import numpy as np
import random, math
import keras
from keras.utils.np_utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

image_dir = "10types"
size = 200
data_augmentation = True
batch_size = 32
epochs = 200

'''
- X_train(image)
- Y_train(label)
- X_test(image)
- Y_test(label)
- categories
'''

categories = []

dir_list = os.listdir(image_dir)
for index, dir_name in enumerate(dir_list):
  if dir_name == '.DS_Store' :
    continue
  categories.append(dir_name)

num_classes = len(categories)
print(num_classes)

train_data = []

for idx, category in enumerate(categories):
  try :
    print("---", category)
    each_dir = image_dir + "/" + category
    files = glob.glob(each_dir + "/*")
    for i, f in enumerate(files):
      img = Image.open(f)
      img = img.convert("RGB")
      img = img.resize((size, size))
      data = np.asarray(img)
      train_data.append([data, idx])

  except:
    print("SKIP : " + category)

random.shuffle(train_data)
X, Y = [],[]
for data in train_data:
  X.append(data[0])
  Y.append(data[1])

test_idx = math.floor(len(X) * 0.8)
xy = (np.array(X[0:test_idx]), np.array(X[test_idx:]),
      np.array(Y[0:test_idx]), np.array(Y[test_idx:]))

x_train, x_test, y_train, y_test = xy

X_train = x_train.reshape([-1, size, size, 3])
X_test = x_test.reshape([-1, size, size, 3])

# convert integer RGB values (0-255) to float values (0-1)
X_train = X_train.astype('float32') / 255
X_test = X_test.astype('float32') / 255

# convert class labels to one-hot encodings
Y_train = to_categorical(y_train, num_classes)
Y_test = to_categorical(y_test, num_classes)

'''

class model_definition:

    def __init__(self):
        self.num_classes = len(categories)
        self.X_train = X_train
        self.X_test = X_test
        self.Y_train = Y_train
        self.Y_test = Y_test
        

def model_train(self, input=None):
'''


model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=X_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(X_test, Y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(X_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(X_train, Y_train,
                        batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(X_test, Y_test),
                        workers=4)




score = model.evaluate(X_test, Y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

json_string = model.to_json()
open('model_structure.json', 'w').write(json_string)
model.save(os.path.join('model.h5'))


